## this "library" is a little collection of functions that can be used again and again in shell scripts
## author: andreaswendlandt
## last modified: 7.6.2020


# function for checking if a variable is an integer one
is_int(){
    if [ -z "$(echo "$1" | sed -e 's/[[:digit:]]//g')" ]; then
        return 0
    else
        return 1
    fi
}

# function for checking if a variable is empty
is_empty(){
    if [ -z "$1" ]; then
        return 0
    else
        return 1
    fi
}

# function for checking if a variable consists only of alphanumeric characters
is_alpha(){
    if [ -z "$(echo "$1" | sed -e 's/[[:alpha:]]//g')" ]; then
        return 0
    else
        return 1
    fi
}

# logging function - logs to /tmp/<script-name.log>
my_logfile=/tmp/$(basename $0).log
my_log() {
    echo $(date) "$@" >>$my_logfile
}

# flock - ensure that only one instance of your script is running
# if you try to run your script while antother one is running it will abort
lock_err(){
    echo "ERROR, another instance of $(basename $0) is already running - aborting!!!"
    exit 1
}
my_flock(){
    pidfile="/tmp/$(basename $0).pid"
    exec 300>$pidfile
    flock -n 300 ||  lock_err 
    pid=$$
    echo $pid 1>&300
}

# 'config grep' - grep in files, get 3 possible return values, your search pattern was found - you get a "match"
# your search pattern was not found - you get a "no occurence" or and that is different to the regular grep
# you get an "outcommented" if the line of the match starts with a '#' or a ';'
config_grep(){
    if [ $# -ne 2 ]; then
        echo "error: 2 parameters are needed for ${FUNCNAME}"
        echo "USAGE: ${FUNCNAME} 'search pattern' 'search file'"
        return 1
    fi
    if [ -f $2 ]; then
        result=$(grep -i $1 $2 2>/dev/null | awk '{if (substr($1,1,1) ~ /#|;/) {print "outcommented"} else {print "match"}}')
        if [ -z $result ]; then
            result="no occurence"
        fi
        echo $result
    else
        echo "file \"$2\" does not exist"
        return 1
    fi
}

# function for checking if the script was started with root privileges
started_as_root(){
    if [ $(id -u) -eq 0 ]; then
        return 0
    else
        return 1
    fi
}
